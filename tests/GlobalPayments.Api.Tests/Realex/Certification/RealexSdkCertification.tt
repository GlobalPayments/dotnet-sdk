<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	WriteHeader();

	WriteLine("namespace GlobalPayments.Api.Tests.Realex.Certification");
	OpenBrace();

	WriteLine("[TestClass]");
	WriteLine("public partial class RealexSdkCertification");
	OpenBrace();

	WriteLine("[TestCleanup]");
	WriteLine("public void Throttle() { System.Threading.Thread.Sleep(1500); }");
	WriteLine(string.Empty);

	List<string> negativeTests = GetNegativeTests(@"C:\Projects\Integrations\SDK\HybridSDK\tests\GlobalPayments.Api.Tests\Realex\Certification\realex_responses.csv");
	List<string> ignoreTests = new List<string>() {
			"JAVA-Manual-036a",
			"JAVA-Manual-036b",
			"JAVA-Manual-036c",
			"JAVA-Manual-036d",
			"JAVA-Rebate-006i",
			"JAVA-Credit-006i",
			"JAVA-Credit-006k",
			"JAVA-Auth-012d"
		};
	List<string> authorizations = new List<string>() {
		"Authorize", "Charge", "Verify"
	};
	List<string> management = new List<string>() {
		"Refund", "Capture", "Hold", "Release", "Void"
	};

	var lines = GetTestValues(@"C:\Projects\Integrations\SDK\HybridSDK\tests\GlobalPayments.Api.Tests\Realex\Certification\realex_requests.csv");
	for(int i = 2; i < lines.Length; i++) {
		var test_data = lines[i].Split(',');
		if(string.IsNullOrEmpty(lines[i].Trim()) || test_data.Length == 0)
			continue;

		// skip ones without a transaction type
		if(string.IsNullOrEmpty(test_data[4].Trim()))
			continue;

		// skip ones which are not applicable or mobile
		if(ignoreTests.Contains(test_data[0]) || test_data[0].ToLower().Contains("-mobile-"))
			continue;

		// skip 5xx errors
		if(negativeTests.Contains(test_data[0]))
			continue;

		// cvv errors
		string cvv = null;
		if(!string.IsNullOrEmpty(test_data[9]) || !string.IsNullOrEmpty(test_data[10])) {
			var cardNumber = test_data[9];
			if(!cardNumber.StartsWith("3"))
				cvv = test_data[13];
		}
		
		// Method signature
		WriteLine("[TestMethod]");
		if(negativeTests.Contains(test_data[0]) || (!string.IsNullOrEmpty(cvv) && cvv.Length != 3))
			WriteLine("[ExpectedException(typeof(GatewayException))]");
		WriteLine(string.Format("public void {0}()", test_data[0].Replace("-", "_").Replace(" ", "_")));
		OpenBrace();

		// Configure Service Container
		WriteLine("ServicesContainer.Configure(new ServicesConfig {");
		PushIndent("    ");
		//WriteLine(string.Format("MerchantId = \"{0}\",", test_data[7]));
		WriteLine(string.Format("MerchantId = \"{0}\",", "heartlandgpsandbox"));
		//WriteLine(string.Format("AccountId = \"{0}\",", test_data[8]));
		WriteLine(string.Format("AccountId = \"{0}\",", "api"));
		WriteLine(string.Format("SharedSecret = \"{0}\",", test_data[2]));
		//if(!string.IsNullOrEmpty(test_data[42]))
		WriteLine(string.Format("RefundPassword = \"{0}\",", "refund"));
		WriteLine(string.Format("RebatePassword = \"{0}\",", "rebate"));
		WriteLine(string.Format("ServiceUrl = \"{0}\",", test_data[1]));
		//WriteLine(string.Format("ServiceUrl = \"{0}\",", @"http://86.47.218.250:8080/epage-remote.cgi"));
		WriteLine(string.Format("Timeout = {0},", test_data[3]));
		if(!string.IsNullOrEmpty(test_data[20]))
			WriteLine(string.Format("Channel = \"{0}\"", test_data[20]));
		PopIndent();
		WriteLine("});");
		WriteLine(string.Empty);

		// Amount
		string amount = "";
		if(!string.IsNullOrEmpty(test_data[21])) {
			decimal parsed_amount = 0;
			if(decimal.TryParse(test_data[21], out parsed_amount)) {
				amount = (parsed_amount / 100) + "m";
			}
		}

		// Billing Address
		bool billingAddress = false;
		if(!string.IsNullOrEmpty(test_data[16]) || !string.IsNullOrEmpty(test_data[17])) {
			billingAddress = true;
			WriteLine("// billing address");
			WriteLine("var billingAddress = new Address {");
			PushIndent("    ");
			if(!string.IsNullOrEmpty(test_data[37]))
				WriteLine(string.Format("StreetAddress1 = \"{0}\",", test_data[37]));
			if(!string.IsNullOrEmpty(test_data[16]) || !string.IsNullOrEmpty(test_data[38]))
				WriteLine(string.Format("PostalCode = \"{0}\",", !string.IsNullOrEmpty(test_data[16]) ? test_data[16] : test_data[38]));
			if(!string.IsNullOrEmpty(test_data[17]))
				WriteLine(string.Format("Country = \"{0}\"", test_data[17]));
			PopIndent();
			WriteLine("};");
			WriteLine(string.Empty);
		}

		// Shipping Address
		bool shippingAddress = false;
		if(!string.IsNullOrEmpty(test_data[18]) || !string.IsNullOrEmpty(test_data[19])) {
			shippingAddress = true;
			WriteLine("// shipping address");
			WriteLine("var shippingAddress = new Address {");
			PushIndent("    ");
			if(!string.IsNullOrEmpty(test_data[18]))
				WriteLine(string.Format("PostalCode = \"{0}\",", test_data[18]));
			if(!string.IsNullOrEmpty(test_data[19]))
				WriteLine(string.Format("Country = \"{0}\"", test_data[19]));
			PopIndent();
			WriteLine("};");
			WriteLine(string.Empty);
		}

		// Create Card
		bool card = false;
		if(!string.IsNullOrEmpty(test_data[9]) || !string.IsNullOrEmpty(test_data[10])) {
			card = true;
			WriteLine("// create card");
			WriteLine("var card = new CreditCardData {");
			PushIndent("    ");
			WriteLine(string.Format("Number = \"{0}\",", test_data[9]));
			if(!string.IsNullOrEmpty(test_data[11])) {
			    var expYear = test_data[11].Substring(2);
				WriteLine(string.Format("ExpMonth = {0},", test_data[11].Substring(0, 2)));
				WriteLine(string.Format("ExpYear = {0},", (expYear.Length == 2) ? "20" + expYear : expYear));
			}
			WriteLine(string.Format("Cvn = \"{0}\",", test_data[13]));
			if(!string.IsNullOrEmpty(test_data[14]))
				WriteLine(string.Format("CvnPresenceIndicator = (CvnPresenceIndicator){0},", test_data[14]));
			if(!string.IsNullOrEmpty(test_data[15]))
				WriteLine(string.Format("CardHolderName = \"{0}\"", test_data[15]));
			PopIndent();
			WriteLine("};");
			WriteLine(string.Empty);
		}

		// Transaction Reference
		bool transactionReference = false;
		if(!string.IsNullOrEmpty(test_data[40]) || !string.IsNullOrEmpty(test_data[41])) {
			transactionReference = true;

			//WriteLine("// build transaction");
			//WriteLine(string.Format("var trans = Transaction.FromId(\"{0}\");", test_data[40]));
			//if(!string.IsNullOrEmpty(test_data[41])) {
				//WriteLine(string.Format("trans.AuthorizationCode = \"{0}\";", test_data[41]));
			//}
			//WriteLine(string.Empty);

			if(!card) {
				WriteLine("// create card");
				WriteLine("var card = new CreditCardData {");
				PushIndent("    ");
				WriteLine("Number = \"4263970000005262\",");
				WriteLine("ExpMonth = 12,");
				WriteLine("ExpYear = 2020,");
				WriteLine("Cvn = \"123\",");
				WriteLine("CvnPresenceIndicator = (CvnPresenceIndicator)1,");
				WriteLine("CardHolderName = \"James Mason\"");
				PopIndent();
				WriteLine("};");
				WriteLine(string.Empty);
			}

			WriteLine("// build transaction");
			WriteLine(string.Format("var saleResponse = card.Charge({0})", string.IsNullOrEmpty(amount) ? "10m" : amount));
			PushIndent("    ");
			WriteLine(string.Format(".WithCurrency(\"{0}\")", test_data[22]));
			WriteLine(".Execute();");
			PopIndent();
			WriteLine("Assert.IsNotNull(saleResponse);");
			WriteLine("Assert.AreEqual(\"00\", saleResponse.ResponseCode);");
			WriteLine("Throttle();");
			WriteLine(string.Empty);
		}

		// Ecommerce Data
		// bool ecommerceData = false;
		// if(!string.IsNullOrEmpty(test_data[])) {
		// 	ecommerceData = true;
		// 	WriteLine("// ecom data");
		// }

		var methodName = GetMethodName(test_data[4], test_data[23]);
		if(authorizations.Contains(methodName)) {
			if(!card) {
				WriteLine("var card = new CreditCardData();");
				WriteLine(string.Empty);
			}

			// make call
			WriteLine("// request");
			
			WriteLine(string.Format("var response = card.{0}({1})", methodName, (methodName != "Verify") ? amount : ""));
			PushIndent("    ");
			if(!string.IsNullOrEmpty(test_data[22]))
				WriteLine(string.Format(".WithCurrency(\"{0}\")", test_data[22]));
			if(!string.IsNullOrEmpty(test_data[6])) {
				// TODO: Replace Order ID
				// WriteLine(string.Format(".WithOrderId(\"{0}\")", test_data[6]));
			}
			if(!string.IsNullOrEmpty(test_data[31])) {
				WriteLine(string.Format(".WithCustomerId(\"{0}\")", test_data[31]));
			}
			if(!string.IsNullOrEmpty(test_data[32])) {
				WriteLine(string.Format(".WithProductId(\"{0}\")", test_data[32]));
			}
			if(!string.IsNullOrEmpty(test_data[33])) {
				WriteLine(string.Format(".WithClientTransactionId(\"{0}\")", test_data[33]));
			}
			if(!string.IsNullOrEmpty(test_data[34])) {
				WriteLine(string.Format(".WithCustomerIpAddress(\"{0}\")", test_data[34]));
			}
			if(billingAddress) {
				WriteLine(".WithAddress(billingAddress)");
			}
			if(shippingAddress) {
				WriteLine(".WithAddress(shippingAddress, AddressType.Shipping)");
			}
			if(!string.IsNullOrEmpty(test_data[25])) {
				WriteLine(string.Format(".WithDescription(\"{0}\")", test_data[25]));
			}
			WriteLine(".Execute();");
			PopIndent();
			WriteLine("Assert.IsNotNull(response);");
			WriteLine("Assert.AreEqual(\"00\", response.ResponseCode);");
		}
		// Transaction ID
		else if(management.Contains(methodName)) {
			var source = "saleResponse";
			if(!transactionReference) {
				if(!card) {
					WriteLine("var saleResponse = Transaction.FromId(null);");
					WriteLine(string.Empty);
				}
				else source = "card";
			}

			// make call
			WriteLine("// request");
			WriteLine(string.Format("var response = {0}.{1}({2})", source, GetMethodName(test_data[4], test_data[23]), amount));
			PushIndent("    ");
			if(!string.IsNullOrEmpty(test_data[22]))
				WriteLine(string.Format(".WithCurrency(\"{0}\")", test_data[22]));
			if(!string.IsNullOrEmpty(test_data[6])) {
				// TODO: Replace Order ID
				// WriteLine(string.Format(".WithOrderId(\"{0}\")", test_data[6]));
			}
			if(!string.IsNullOrEmpty(test_data[43])) {
				WriteLine(string.Format(".WithReasonCode(ParseReasonCode(\"{0}\"))", test_data[43]));
			}
			if(!string.IsNullOrEmpty(test_data[25])) {
				WriteLine(string.Format(".WithDescription(\"{0}\")", test_data[25]));
			}
			WriteLine(".Execute();");
			PopIndent();
			WriteLine("Assert.IsNotNull(response);");
			WriteLine("Assert.AreEqual(\"00\", response.ResponseCode);");
		}
		else {
			WriteLine("throw new NotImplementedException();");
		}

		CloseBrace(); // close test method
		WriteLine(string.Empty);
	}

	// enum helper
	WriteLine("private ReasonCode? ParseReasonCode(string value) {");
	PushIndent("    ");
	WriteLine("ReasonCode code;");
	WriteLine("if(Enum.TryParse(\"\", out code))");
	OpenBrace();
	WriteLine("return (ReasonCode?)code;");
	CloseBrace(); // end if try parse
	WriteLine("return null;");
	PopIndent();
	WriteLine("}");

	CloseBrace(); // end class
	CloseBrace(); // end namespace
#>
<#+
	void WriteHeader() {
		WriteLine("using System;");
		WriteLine("using GlobalPayments.Api.Entities;");
		WriteLine("using GlobalPayments.Api.PaymentMethods;");
		WriteLine("using Microsoft.VisualStudio.TestTools.UnitTesting;");
		WriteLine(string.Empty);
	}
	string[] GetTestValues(string path) {
		try {
			using(var sr = new StreamReader(path)) {
				var lines = sr.ReadToEnd().Replace("\n", "").Split('\r');
				return lines;
			}
		}
		catch(Exception exc) {
			WriteLine("// " + exc.Message);
			return new string[0];
		}
	}
	List<string> GetNegativeTests(string path) {
		var rvalue = new List<string>();
		try{
			using(var sr = new StreamReader(path)) {
				var lines = sr.ReadToEnd().Replace("\n", "").Split('\r');
				foreach(var line in lines) {
					if(string.IsNullOrEmpty(line))
						continue;

					var data = line.Split(',');
					if(data.Length < 2) continue;

					var testName = data[0];
					var expectedValue = data[1];
					if(expectedValue != "0")
						rvalue.Add(testName);
				}
			}
			WriteLine("// " + rvalue.Count);
			return rvalue;
		}
		catch(Exception exc) {
			WriteLine("// " + exc.Message);
			return new List<string>();
		}
	}
	string GetMethodName(string type, string autoSettle) {
		if(type == "auth" || type == "authorisation" || type == "manual" || type == "auth-mobile") {
			if(autoSettle == "1")
				return "Charge";
			else return "Authorize";
		}
		else if(type == "hold")
			return "Hold";
		else if(type == "rebate" || type == "credit")
			return "Refund";
		else if(type == "release")
			return "Release";
		else if(type == "settle")
			return "Capture";
		else if(type == "void")
			return "Void";
		else if(type == "3ds-verifyenrolled" || type == "otb" || type == "3ds-verifyenroll")
			return "Verify";
		return type;
	}
	void OpenBrace() {
		WriteLine("{");
		PushIndent("    ");
	}
	void CloseBrace() {
		PopIndent();
		WriteLine("}");
	}
#>